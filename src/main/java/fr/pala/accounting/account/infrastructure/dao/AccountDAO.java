package fr.pala.accounting.account.infrastructure.dao;

import fr.pala.accounting.user.infrastructure.dao.UserDAO;
import fr.pala.accounting.user.domain.model.UserModel;
import org.bson.types.ObjectId;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AccountDAO {

    private final MongoTemplate mongoTemplate;

    private final UserDAO userDAO;

    public AccountDAO(MongoTemplate mongoTemplate, UserDAO userDAO) {
        this.mongoTemplate = mongoTemplate;
        this.userDAO = userDAO;
    }

    public AccountModel addAccount(String email, AccountModel accountModel) {
        UserModel user = userDAO.getUserByEmail(email);
        // TODO : Use User to create UserDetails, and get ID directly instead of findUserByEmail

        accountModel.setId(new ObjectId().toString());
        //to set an autogenerated Id to the account
        List<AccountModel> accounts = user.getAccounts();
        accounts.add(accountModel);

        Query query = new Query();
        query.addCriteria(Criteria.where("_id").is(user.getUser_id()));
        Update update = new Update();
        update.set("accounts", accounts);
        mongoTemplate.findAndModify(query, update, UserModel.class);

        return accountModel;
    }

    public List<AccountModel> getAllAccountsOfUsersByUser_id(String user_id) {
        Query query = new Query();
        query.addCriteria(Criteria.where("_id").is(user_id));

        UserModel user = mongoTemplate.findOne(query, UserModel.class);

        if(user != null){
            return user.getAccounts();
        }
        return null;
    }

    public List<AccountModel> getAllAccountsOfUsersByEmail(String email) {
        Query query = new Query();
        query.addCriteria(Criteria.where("email").is(email));

        UserModel user = mongoTemplate.findOne(query, UserModel.class);

        if(user != null){
            return user.getAccounts();
        }
        return null;
    }

    public AccountModel getAccountOfUser(String email, String account_id) {
        List<AccountModel> accounts = getAllAccountsOfUsersByEmail(email);

        AccountModel accountResult = null;
        for (AccountModel account : accounts) {
            if (account.getId().equals(account_id)) {
                accountResult = account;
                break;
            }
        }
        return accountResult;
    }



    public void updateAccount(String email, String account_id, AccountModel account) {
        UserModel user = userDAO.getUserByEmail(email);
        List<AccountModel> accounts = user.getAccounts();

        for (AccountModel accountModel : accounts) {
            if (accountModel.getId().equals(account_id)) {
                accountModel.setAmount(account.getAmount());
                accountModel.setTransactions_ids(account.getTransactions_ids());
                break;
            }
        }

        Query query = new Query();
        query.addCriteria(Criteria.where("_id").is(user.getUser_id()));
        Update update = new Update();
        update.set("accounts", accounts);
        mongoTemplate.findAndModify(query, update, UserModel.class);
    }

    public void deleteAccount(String email, String account_id) {

        UserModel user = userDAO.getUserByEmail(email);
        List<AccountModel> accounts = user.getAccounts();

        for (int i = 0; i < accounts.size(); i++) {
            if(accounts.get(i).getId().equals(account_id)){
                accounts.remove(i);
                break;
            }
        }

        Query query = new Query();
        query.addCriteria(Criteria.where("_id").is(user.getUser_id()));
        Update update = new Update();
        update.set("accounts", accounts);
        mongoTemplate.findAndModify(query, update, UserModel.class);
    }
}
